#include<iostream>
#include<fstream>
#include<cctype>
#include<iomanip>
#include<graphics.h>
#pragma GCC diagnostic ignored "-Wwrite-strings"
using namespace std;
class account
{
int acno;
char name[50];
int deposit;
char type;
public:
void create_account();	
         void show_account() const;
void modify();	
void dep(int);	
void draw(int);
void report() const;	
int retacno() const;	
int retdeposit() const;	
char rettype() const;	
};         
 
void account::create_account()
{
cout<<"\nEnter The Report No. :";
cin>>acno;
cout<<"\n\nEnter The Name of The Patient : ";
cin.ignore();
cin.getline(name,50);
cout<<"\nEnter Type of The Report (N/C) : ";
cin>>type;
type=toupper(type);
cout<<"\nEnter The Initial amount(>=500 for C and >=1000 for N ) :";
cin>>deposit;
cout<<"\n\n\nReport Created..";
}
 
void account::show_account() const
{
cout<<"\nReport No. : "<<acno;
cout<<"\nPatient's' Name : ";
cout<<name;
cout<<"\nType of Report : "<<type;
cout<<"\n amount : "<<deposit;
}
 
 
void account::modify()
{
cout<<"\nReport No. : "<<acno;
cout<<"\nPatient's' Name : ";
cin.ignore();
cin.getline(name,50);
cout<<"\nType of Report : ";
cin>>type;
type=toupper(type);
cout<<"\n amount : ";
cin>>deposit;
}
 

void account::dep(int x)
{
deposit+=x;
}

void account::draw(int x)
{
deposit-=x;
}

void account::report() const
{
cout<<acno<<setw(10)<<" "<<name<<setw(10)<<" "<<type<<setw(6)<<deposit<<endl;
}
 

int account::retacno() const
{
return acno;
}
 
int account::retdeposit() const
{
return deposit;
}
 
char account::rettype() const
{
return type;
}
 
 
//*********************
//    	function declaration
//**********************
void write_account();
void display_sp(int);	
void modify_account(int);	
void delete_account(int);	
void display_all();	
void deposit_withdraw(int, int); 
void intro();
 
//*********************
//    	THE MAIN FUNCTION OF PROGRAM
//**********************
 
 
int main()
{
char ch;
int num;
intro();
do
{
system("cls");
cout<<"\n\n\n\tMAIN MENU";
cout<<"\n\n\t01. NEW REPORT";
cout<<"\n\n\t02. NUTRITIONAL REPORT";
cout<<"\n\n\t03. CBC REPORT";
cout<<"\n\n\t04. BALANCE ENQUIRY";
cout<<"\n\n\t05. ALL REPORT HOLDER LIST";
cout<<"\n\n\t06. CLOSE A REPORT";
cout<<"\n\n\t07. MODIFY A REPORT";
cout<<"\n\n\t08. EXIT";
cout<<"\n\n\tSelect Your Option (1-8) ";
cin>>ch;
system("cls");
switch(ch)
{
case '1':
write_account();
break;
case '2':
cout<<"\n\n\tEnter The report No. : "; cin>>num;
deposit_withdraw(num, 1);
break;
case '3':
cout<<"\n\n\tEnter The report No. : "; cin>>num;
deposit_withdraw(num, 2);
break;
case '4': 
cout<<"\n\n\tEnter The report No. : "; cin>>num;
display_sp(num);
break;
case '5':
display_all();
break;
case '6':
cout<<"\n\n\tEnter The report No. : "; cin>>num;
delete_account(num);
break;
 case '7':
cout<<"\n\n\tEnter The report No. : "; cin>>num;
modify_account(num);
break;
 case '8':
cout<<"\n\n\tThanks for using nutritional chart system";
break;
 default :cout<<"\a";
}
cin.ignore();
cin.get();
}while(ch!='8');
return 0;
}
 
 
//*********************
//    	function to write in file
//**********************
 
void write_account()
{
account ac;
ofstream outFile;
outFile.open("account.dat",ios::binary|ios::app);
ac.create_account();
outFile.write(reinterpret_cast<char *> (&ac), sizeof(account));
outFile.close();
}
 
//*********************
//    	function to read specific record from file
//**********************
 
void display_sp(int n)
{
account ac;
bool flag=false;
ifstream inFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"File could not be open !! Press any Key...";
return;
}
cout<<"\nBALANCE DETAILS\n";
 
    	while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
{
if(ac.retacno()==n)
{
ac.show_account();
flag=true;
}
}
inFile.close();
if(flag==false)
cout<<"\n\nAccount number does not exist";
}
 
 
//*********************
//    	function to modify record of file
//**********************
 
void modify_account(int n)
{
bool found=false;
account ac;
fstream File;
File.open("account.dat",ios::binary|ios::in|ios::out);
if(!File)
{
cout<<"File could not be open !! Press any Key...";
return;
}
while(!File.eof() && found==false)
{
File.read(reinterpret_cast<char *> (&ac), sizeof(account));
if(ac.retacno()==n)
{
ac.show_account();
cout<<"\n\nEnter The New Details of account"<<endl;
ac.modify();
int pos=(-1)*static_cast<int>(sizeof(account));
File.seekp(pos,ios::cur);
File.write(reinterpret_cast<char *> (&ac), sizeof(account));
cout<<"\n\n\t Record Updated";
found=true;
  }
}
File.close();
if(found==false)
cout<<"\n\n Record Not Found ";
}
 
//*********************
//    	function to delete record of file
//**********************
 
 
void delete_account(int n)
{
account ac;
ifstream inFile;
ofstream outFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"File could not be open !! Press any Key...";
return;
}
outFile.open("Temp.dat",ios::binary);
inFile.seekg(0,ios::beg);
while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
{
if(ac.retacno()!=n)
{
outFile.write(reinterpret_cast<char *> (&ac), sizeof(account));
}
}
inFile.close();
outFile.close();
remove("account.dat");
rename("Temp.dat","account.dat");
cout<<"\n\n\tRecord Deleted ..";
}
 
//*********************
//    	function to display all accounts deposit list
//**********************
 
void display_all()
{
account ac;
ifstream inFile;
inFile.open("account.dat",ios::binary);
if(!inFile)
{
cout<<"File could not be open !! Press any Key...";
return;
}
cout<<"\n\n\t\tACCOUNT HOLDER LIST\n\n";
cout<<"====================================================\n";
cout<<"Report no.      NAME           Type  Balance\n";
cout<<"====================================================\n";
while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(account)))
{
ac.report();
}
inFile.close();
}
 
//*********************
//    	function to deposit and withdraw amounts
//**********************
 
void deposit_withdraw(int n, int option)
{
int amt;
bool found=false;
account ac;
fstream File;
File.open("account.dat", ios::binary|ios::in|ios::out);
if(!File)
{
cout<<"File could not be open !! Press any Key...";
return;
}
while(!File.eof() && found==false)
{
File.read(reinterpret_cast<char *> (&ac), sizeof(account));
if(ac.retacno()==n)
{
ac.show_account();
if(option==1)
{
cout<<"\n\n\tNUTRITIONAL REPORT ";
cout<<"\n\nEnter The Reading of vit D";
cin>>amt;
if(amt<50)
    {
    	cout<<"you have adequate amount of Vitamin D in your body";
}
else

{

int gmode=DETECT ,gm;
initgraph(&gmode, &gm, "c://tc//bgi");
readimagefile("Vitamin-D-Diet-Chart-v1.JPG", 200, 200, 500, 500);
getch();
closegraph();

    
    }
    cout<<"\n\nEnter The Reading of iron ";
cin>>amt;
if(amt<49)
{
cout<<"you have adequate amount of iron in your body";
}
else
{
int gmode=DETECT ,gm;
initgraph(&gmode, &gm, "c://tc//bgi");
readimagefile("iron.JPG", 200, 200, 500, 500);
getch();
closegraph();

}
cout<<"\n\nEnter The Reading of cholestrol ";
cin>>amt;
if(amt<100)
{
cout<<"you have adequate amount of cholestrol in your body";
}
else
{
         int gmode=DETECT ,gm;
initgraph(&gmode, &gm, "c://tc//bgi");
readimagefile("cholestrol.JPG", 200, 200, 500, 500);
getch();
closegraph();
}

ac.dep(amt);
}
if(option==2)
{
cout<<"\n\n\tTO CBC REPORT ";
cout<<"\n\nEnter The reading of cbc report";
cin>>amt;
int bal=ac.retdeposit()-amt;
if((bal<500 && ac.rettype()=='S') || (bal<1000 && ac.rettype()=='C'))
cout<<"Insufficience balance";
else
ac.draw(amt);
}
int pos=(-1)*static_cast<int>(sizeof(ac));
File.seekp(pos,ios::cur);
File.write(reinterpret_cast<char *> (&ac), sizeof(account));
cout<<"\n\n\t Record Updated";
found=true;
       }
         }
File.close();
if(found==false)
cout<<"\n\n Record Not Found ";
}
 
 
//*********************
//    	INTRODUCTION FUNCTION
//**********************
 
 
void intro()
{
cout<<"\n\n\n\t  NUTRITIONAL";
cout<<"\n\n\tCHART";
cout<<"\n\n\t  SYSTEM";
cout<<"\n\n\n\nMADE BY : GROUP 05";
cout<<"\n\nSCHOOL : FCRIT";
cin.get();
}
